import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class EditProfileScreen extends StatefulWidget {
  const EditProfileScreen({super.key});

  @override
  State<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends State<EditProfileScreen> {
  final _formKey = GlobalKey<FormState>();

  final TextEditingController nameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController dobController = TextEditingController();
  final TextEditingController placeController = TextEditingController();

  String? selectedGender;
  String? selectedBloodGroup;

  bool _isLoading = true;
  bool _isSaving = false;

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  Future<void> _loadUserData() async {
    try {
      final uid = FirebaseAuth.instance.currentUser!.uid;
      final doc = await FirebaseFirestore.instance.collection('users').doc(uid).get();

      if (doc.exists) {
        final data = doc.data()!;
        nameController.text = data['name'] ?? '';
        emailController.text = data['email'] ?? '';
        phoneController.text = data['phone'] ?? '';
        dobController.text = data['dob'] ?? '';
        placeController.text = data['place'] ?? '';
        selectedGender = data['gender'];
        selectedBloodGroup = data['bloodGroup'];
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Failed to load profile: $e"),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  void dispose() {
    nameController.dispose();
    emailController.dispose();
    phoneController.dispose();
    dobController.dispose();
    placeController.dispose();
    super.dispose();
  }

  // Validation
  String? _validateName(String? value) {
    if (value == null || value.trim().isEmpty) return "Enter full name";
    if (value.trim().length < 3) return "Name must be at least 3 characters";
    return null;
  }

  String? _validateEmail(String? value) {
    if (value == null || value.trim().isEmpty) return "Enter email";
    final emailRegex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$');
    if (!emailRegex.hasMatch(value.trim())) return "Enter valid email";
    return null;
  }

  String? _validatePhone(String? value) {
    if (value == null || value.trim().isEmpty) return "Enter phone number";
    final phoneRegex = RegExp(r'^\d{10}$');
    if (!phoneRegex.hasMatch(value.trim())) return "Enter valid 10-digit phone number";
    return null;
  }

  String? _validateDob(String? value) {
    if (value == null || value.trim().isEmpty) return "Select date of birth";
    return null;
  }

  String? _validatePlace(String? value) {
    if (value == null || value.trim().isEmpty) return "Enter place";
    return null;
  }

  String? _validateGender(String? value) {
    if (value == null || value.trim().isEmpty) return "Select gender";
    return null;
  }

  String? _validateBloodGroup(String? value) {
    if (value == null || value.trim().isEmpty) return "Select blood group";
    return null;
  }

  // Save profile
  Future<void> _saveProfile() async {
    if (!_formKey.currentState!.validate()) return;

    final confirm = await showDialog<bool>(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text("Confirm Update"),
        content: const Text("Are you sure you want to update your profile? This will overwrite previous details."),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context, false), child: const Text("Cancel")),
          ElevatedButton(onPressed: () => Navigator.pop(context, true), child: const Text("Update")),
        ],
      ),
    );

    if (confirm != true) return;

    setState(() => _isSaving = true);

    try {
      final uid = FirebaseAuth.instance.currentUser!.uid;

      await FirebaseFirestore.instance.collection('users').doc(uid).update({
        "name": nameController.text.trim(),
        "email": emailController.text.trim(),
        "phone": phoneController.text.trim(),
        "dob": dobController.text.trim(),
        "place": placeController.text.trim(),
        "gender": selectedGender,
        "bloodGroup": selectedBloodGroup,
        "updatedAt": FieldValue.serverTimestamp(),
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Profile updated successfully!"),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 2),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Failed to update profile: $e"),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isSaving = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Edit Profile"), backgroundColor: Colors.red),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: AbsorbPointer(
          absorbing: _isSaving, // disable while saving
          child: Form(
            key: _formKey,
            autovalidateMode: AutovalidateMode.onUserInteraction,
            child: Column(
              children: [
                // Name
                _buildTextField("Full Name", Icons.person, nameController, _validateName),
                const SizedBox(height: 15),
                // Email
                _buildTextField("Email", Icons.email, emailController, _validateEmail, keyboard: TextInputType.emailAddress),
                const SizedBox(height: 15),
                // Phone
                _buildTextField("Phone Number", Icons.phone, phoneController, _validatePhone, keyboard: TextInputType.phone),
                const SizedBox(height: 15),
                // DOB
                TextFormField(
                  controller: dobController,
                  decoration: const InputDecoration(
                    labelText: "Date of Birth",
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.calendar_today),
                  ),
                  readOnly: true,
                  onTap: () async {
                    DateTime? picked = await showDatePicker(
                      context: context,
                      initialDate: DateTime(2000),
                      firstDate: DateTime(1900),
                      lastDate: DateTime.now(),
                    );
                    if (picked != null) {
                      dobController.text = "${picked.toLocal()}".split(' ')[0];
                    }
                  },
                  validator: _validateDob,
                ),
                const SizedBox(height: 15),
                // Gender
                DropdownButtonFormField<String>(
                  decoration: const InputDecoration(
                    labelText: "Gender",
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.people),
                  ),
                  items: ["Male", "Female", "Other"].map((gender) => DropdownMenuItem(value: gender, child: Text(gender))).toList(),
                  value: selectedGender,
                  onChanged: (value) => setState(() => selectedGender = value),
                  validator: _validateGender,
                ),
                const SizedBox(height: 15),
                // Blood Group
                DropdownButtonFormField<String>(
                  decoration: const InputDecoration(
                    labelText: "Blood Group",
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.bloodtype),
                  ),
                  items: ["A+", "A-", "B+", "B-", "O+", "O-", "AB+", "AB-"]
                      .map((bg) => DropdownMenuItem(value: bg, child: Text(bg)))
                      .toList(),
                  value: selectedBloodGroup,
                  onChanged: (value) => setState(() => selectedBloodGroup = value),
                  validator: _validateBloodGroup,
                ),
                const SizedBox(height: 15),
                // Place
                _buildTextField("Place", Icons.home, placeController, _validatePlace),
                const SizedBox(height: 25),
                // Save Button
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                      padding: const EdgeInsets.symmetric(vertical: 14),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                    ),
                    onPressed: _saveProfile,
                    child: _isSaving
                        ? const SizedBox(height: 20, width: 20, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2))
                        : const Text("Save Changes", style: TextStyle(fontSize: 18, color: Colors.white)),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(String label, IconData icon, TextEditingController controller, String? Function(String?) validator, {TextInputType keyboard = TextInputType.text}) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: label,
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
        prefixIcon: Icon(icon),
        filled: true,
        fillColor: Colors.grey[100],
      ),
      validator: validator,
      keyboardType: keyboard,
    );
  }
}
