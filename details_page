import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:url_launcher/url_launcher.dart';

class DetailsPage extends StatelessWidget {
  final Map<String, dynamic> requestData;

  const DetailsPage({Key? key, required this.requestData}) : super(key: key);

  // ================= Launch phone call =================
  void _callPhone(String phone) async {
    final Uri url = Uri(scheme: 'tel', path: phone);
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    } else {
      debugPrint("Cannot launch phone dialer");
    }
  }

  // ================= Launch SMS =================
  void _sendSMS(String phone, {String? body}) async {
    final Uri url = Uri(
      scheme: 'sms',
      path: phone,
      query: body != null ? 'body=${Uri.encodeComponent(body)}' : null,
    );
    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    } else {
      debugPrint("Cannot launch SMS app");
    }
  }

  // ================= Launch Email =================
  void _sendEmail(String email, {String? subject, String? body, List<String>? cc}) async {
    final Uri url = Uri(
      scheme: 'mailto',
      path: email,
      query: [
        if (subject != null) 'subject=${Uri.encodeComponent(subject)}',
        if (body != null) 'body=${Uri.encodeComponent(body)}',
        if (cc != null && cc.isNotEmpty)
          'cc=${Uri.encodeComponent(cc.join(','))}',
      ].join('&'),
    );

    if (await canLaunchUrl(url)) {
      await launchUrl(url);
    } else {
      debugPrint("Cannot launch email app");
    }
  }

  @override
  Widget build(BuildContext context) {
    final String? bloodGroup = requestData['bloodGroup'];
    final String? requestPhone = requestData['phone'];

    return Scaffold(
      appBar: AppBar(
        title: const Text("Matched Donors"),
        backgroundColor: Colors.redAccent,
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Requested user details
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  "Requested Blood Group: ${bloodGroup ?? '-'}",
                  style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Text("Name: ${requestData['name'] ?? '-'}"),
                Text("Age: ${requestData['age'] ?? '-'}"),
                Text("Phone: ${requestData['phone'] ?? '-'}"),
                Text("Location: ${requestData['location'] ?? '-'}"),
                if (requestData['hospital'] != null && requestData['hospital'].toString().isNotEmpty)
                  Text("Hospital: ${requestData['hospital']}"),
              ],
            ),
          ),
          const Divider(),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text(
              "Matched Donors",
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
          ),

          // Donors from Firestore
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection("users")
                  .where("bloodGroup", isEqualTo: bloodGroup)
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                  return const Center(child: Text("No donors found for this blood group."));
                }

                // Exclude requester
                final donors = snapshot.data!.docs.where((doc) {
                  final data = doc.data() as Map<String, dynamic>;
                  return data['phone'] != requestPhone;
                }).toList();

                if (donors.isEmpty) {
                  return const Center(child: Text("No matching donors found."));
                }

                return ListView.builder(
                  itemCount: donors.length,
                  itemBuilder: (context, index) {
                    final donor = donors[index].data() as Map<String, dynamic>;

                    return Card(
                      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      child: ListTile(
                        leading: const Icon(Icons.person, color: Colors.redAccent),
                        title: Text(
                          donor['name'] ?? "No Name",
                          style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                        ),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text("Phone: ${donor['phone'] ?? '-'}"),
                            Text("Email: ${donor['email'] ?? '-'}"),
                            Text("Location: ${donor['address'] ?? '-'}"),
                          ],
                        ),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            IconButton(
                              icon: const Icon(Icons.call, color: Colors.green),
                              onPressed: donor['phone'] != null
                                  ? () => _callPhone(donor['phone'])
                                  : null,
                            ),
                            IconButton(
                              icon: const Icon(Icons.message, color: Colors.blue),
                              onPressed: donor['phone'] != null
                                  ? () => _sendSMS(donor['phone'], body: "Hello, we need your blood donation!")
                                  : null,
                            ),
                            IconButton(
                              icon: const Icon(Icons.email, color: Colors.orange),
                              onPressed: donor['email'] != null
                                  ? () => _sendEmail(
                                donor['email'],
                                subject: "Blood Donation Request",
                                body:
                                "Hello ${donor['name']},\n\nWe need your ${bloodGroup ?? ''} blood donation. Please contact the requester.",
                              )
                                  : null,
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
